#include <iostream>
using namespace std;
void _strcpy( char *dest, const char *src);
void _strncpy( char *dest, const char *src, int n);
void _strcpy2 ( char *dest, const char *src);
int _strlen (const char* str);
int _strcmp( const char* str1, const char* str2);
int _strncmp (const char* str1, const char* str2, int n);
void _strstr(char *str1, char *str2); 
void _strcat(char* str1, const char* str2);
void _strncat(char* str1, const char* str2, int n);
int main() {
    const char* mysource = "demon king";
    char mydestination[100];
    _strcpy(mydestination, mysource);
    cout << "_strcpy " << mydestination << endl;
    _strcpy2(mydestination, mysource);
    cout << "_strcpy2 " << mydestination << endl;
    int l = _strlen(mydestination);
    cout << "_strlen " << l << endl;
    const char *s1 = "tricksters";
    const char *s2 = "trickster";
    cout << "S1 & S2 compare as follows : " <<_strcmp(s1,s2)<<endl;
    return 0;
}
// example of string copy operation
void  _strcpy(char *destination, const char *source) {
 
    int i=0;
    while(source[i]) {
        destination[i] = source[i];
        i++;
    }
    destination[i] = '\0';
}
 
//more elegant implementation of string copy
void _strcpy2(char *destination, const char *source) {
 
   //check if source is not null and destination is not null
   while(*destination++ == *source++);
}
 
//example implementation of string length.
int _strlen(const char* str) {
 
    int len=0;
    while(*str++) len++;
    
    return len;
}
//example implementation of string compare
int _strcmp(const char* s1, const char* s2) {
 
 while(*s1 && (*s1 == *s2))
 {
     s1++;
     s2++;
 }
 return *(const unsigned char*)s1 - *(const unsigned char*)s2;
}
 
//Fill in this method so that calling _stracat can append s2 contents to s1
void _strcat(char* s1, const char* s2) {

  char *result = new char;

  int n= 0;

  result[n]=*s1;
  n++;

  while(*s1++){
    if(*s1!='\0'){
    result[n]=*s1;
    n++;
    }
  };

  result[n]=*s2;
  n++;

  while(*s2++){
    result[n]=*s2;
    n++;
  };

  cout<<result<<endl;
}
//check if string s2 is inside or embedded within string s1
void _strstr(char *s1, char *s2) {

  int size = 0; // Going to count the length of s2
  bool match = false;

  do{ //function for determining size of s2 
    size++;
  }while(s2[size]!= '\0');

  int n = 0; //Variable to break out of loop when there's a number of consecutive matches meeting the size of s2

  int m = 0; //Variable use to bring s2 back to the starting letter, in case there's no consecutive match.
  

  do{
    if(*s1 == s2[m]){ // if the two letters match add 1 to n and 1 to m
      n++;
      if (n==size){// loop termination when match is found
        match = true;
        break;
      }
      m++;
      s1++;

    }
    else {// resets n and m when non-matches are found.
      n=0;
      m=0;
      s1++;
    }
  }while(*s1 != '\0');
  
  if(match==true){
    cout<<"There's a match";
  }
  else{
    cout<<"There's not a match";
  }

 
}
// _strcpy for specified number of characters n.
void _strncpy(char *s1, char* s2, int n) {

  cout << "How many charcters do you want to copy over to s2?";
  cin>>n;

  int m = 0;

  while(m != n){
    s2[m]=s1[m];
    m++;
  }

  cout<<s2;
 
}
// _strcmp for specified number of characters n.
int _strncmp(const char* s1, const char*s2) {

  int size = 0; // Asking for the length to compare

  cout<<"What is the length of character of S1 to compare to S2?"<<endl;
  cin >> size;

  int n = 0; //Tallying the amount of characters compared

  while(n != size){
    s1++;
    s2++;
    n++;
  }

  return *(const unsigned char*)s1 - *(const unsigned char*)s2; //returning the result of lexicon of s1 - lexicon of s2... capitol letters throws the number off. A possible solution is to lower case everything in a temp variable.

 
}
// _strcat for specified number of characters n.
void _strncat(char* s1, const char *s2, int n) {
  
  int m = 0;

  int c = 0;

  char *temp = new char;

  while (*s1 != '\0'){  //creating a temp copy of s1
    temp[c]=*s1;
    c++;
    s1++;
  }

  while (m != n){ //using temp copy, add s2 limited by length.
    if(s2[m] != '\0'){
      temp[c+m]= s2[m];
      m++;
    }
    else{break;}
  }

  temp[c+m] = '\0';

  cout<< temp;
}
